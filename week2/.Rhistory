qplot(hwy, data=mpg, geom="density", facets=.~drv, col=drv, fill=drv)
relabel
??label
qplot(hwy, data=mpg, geom="density", facets=.~drv, col=drv)
qplot(hwy, data=mpg, geom="density", facets=drv~., col=drv)
rpois(2, c(1,100))
rpois(4, c(1,100))
rpois(4, c(1,100, 2, 50))
rpois(4, c(1,100, 2, 50))
rpois(4, c(1,100, 2, 50))
rpois(4, c(1,100, 2, 50))
ggplot_build()
q()
runif(10, -1, 1)
sampleX <- matrix(runif(2000, -1, 1), ncol=2)
head(sampleX)
sampleX <- matrix(runif(2000, -1, 1), ncol=1)
sampleX <- matrix(runif(2000, -1, 1), ncol=1)
sampleY <- apply(sampleX, 1, function(x){ sin(Pi*x[1])+sin(Pi*x[2]) })
pi
sampleY <- apply(sampleX, 1, function(x){ sin(pi*x[1])+sin(pi*x[2]) })
sampleY
sampleY <- apply(sampleX, 1, function(x){ x })
sampleY
head(sampleX)
head(sampleY)
sampleX <- matrix(runif(2000, -1, 1), ncol=2)
sampleY <- apply(sampleX, 1, function(x){ x[2] })
head(sampleX)
head(sampleY)
alpha <- apply(sampleX, 1, function(x){ sum(sin(pi*x))/sum(x)})
head(alpha)
mean(aplha)
mean(alpha)
head(sin(pi*sampleX))
sampleX <- matrix(runif(20000, -1, 1), ncol=2)
alpha <- apply(sampleX, 1, function(x){ sum(sin(pi*x))/sum(x)})
mean(alpha)
head(sampleY)
head(sin(pi*sampleX))
head(sampleX)
length(alpha)
seq(0, 1, 100)
seq(0, 1, 0.1)
x <- seq(-1, 1, 1000)
malpha <- mean(aplha)
malpha <- mean(alpha)
?var
var(1:5, 1:5)
mse(1:5, 1:5)
y <- sin(pi*x)
yp <- malpha*x
mean((y-yp)^2)
mean((y-0)^2)
y
x
x <- seq(-1, 1, 0.0001)
y <- sin(pi*x)
yp <- malpha*x
mean((y-yp)^2)
mean((y-0)^2)
getvar <- function(alpha)
{
getvar <- function(x)
{
mean(((alpha-malpha)*x)^2)
}
getvar(0.01)
mean(sapply(x, getvar))
mean(sapply(seq(-1,1, 0.01), getvar))
mean(sapply(seq(-1,1, 0.1), getvar))
mean(sapply(seq(-1,1, 0.001), getvar))
length(alpha)
getalpha <- function(x)
{
sum(x*sin(pi*x))/sum(x^2)
}
alphas <- apply(sampleX, 1, getalpha)
length(alphas)
malpha <- mean(alphas)
malpha
head(sampleX)
head(alphas)
plot(sampleX[1,], sin(pi*sampleX[1,])
)
lines(seq(-1,1,0.01), seq(-1,1,0.01)*alphas[1], type='l')
plot(sampleX[2,], sin(pi*sampleX[2,])
)
lines(seq(-1,1,0.01), seq(-1,1,0.01)*alphas[2], type='l')
sin(sampleX[1,1]*pi)*sampleX[1,1]+sin(sampleX[1,2]*pi)*sampleX[1,2]
sum(x[1,]^2)
x[1,]
sum(sampleX[1,]^2)
1.0286/0.7796
summary(alphas)
sampleX <- matrix(runif(20000, -1, 1), ncol=2)
alphas <- apply(sampleX, 1, getalpha)
malpha <- mean(alphas)
malpha
plot(x, y)
length(x)
x <- seq(-1,1, 0.01)
y=sin(pi*x)
plot(x, y)
lines(x, x*malpha, type='l')
lines(x, x*0.79, type='l')
plot(x, y)
lines(x, x*0.79, type='l', col='red')
lines(x, x*malpha, pch='b--')
lines(x, x*1.07, pch='g..')
plot(x, y)
lines(x, x*malpha, col='black')
lines(x, x*0.79, col='red', type='dotted')
lines(x, x*0.79, col='red', type='dotted')
lines(x, x*0.79, col='red', type='d')
lines(x, x*0.79, col='red', type='l', )
lines(x, x*0.79, col='red', type='l')
lines(x, x*1.07, col='blue', type='l')
getalphabeta <- function(x)
{
sumx <- sum(x)
sumxx <- sum(x^2)
sumxy <- sum(x*sin(pi*x))
sumy <- sum(sin(pi*x))
N <- length(x)
alpha <- (sumxy - sumx*sumy/N)/(sumxx - sumx^2/N)
beta <- (sumy - alpha*sumx)/N
c(alpha, beta)
}
twovar <- apply(sampleX, 1, getalphabeta)
head(twovar)
str(twovar)
head(t(twovar))
colMeans(t(twovar)
)
?apply
getbias <- function(g)
{
x <- seq(-1, 1, 0.001)
y <- sin(pi*x)
yp <- sapply(x, g)
mean((y-yp)^2)
}
getbias(function(x) {0.02631413 + 0.78739704*x})
getbias(function(x) {malpha*x})
getbias <- function(g,...)
{
x <- seq(-1, 1, 0.001)
y <- sin(pi*x)
yp <- sapply(x, g, ...)
mean((y-yp)^2)
}
getbias(g2 <- function(x, vars) vars[1]*x + vars[2] 
g2 <- function(x, vars) vars[1]*x + vars[2] 
g2
getbias(g2, vars=colMeans(twovars))
twovars <- t(apply(sampleX, 1, getalphabeta)
)
getbias(g2, vars=colMeans(twovars))
g1 <- function(x, vars) vars[1]*x
g1 <- function(x, vars) vars[1]*x
getbias(g1, vars=malpha)
colMeans(alphas)
twovars[1]
twovars[1,]
?mse
getvariance1 <- function(vars)
{
malpha <- mean(vars)
getvar_singlepoint <- function(x) mean((vars - malpha)*x)^2
x <- seq(-1, 1, 0.001)
mean(sapply(x, getvar_singlepoint))
}
getvariance1(alphas)
length(alphas)
getvariance2 <- function(vars)
{
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g2(x, v) - g2(x, mvars))^2))
}
x <- seq(-1, 1, 0.001)
mean(sapply(x, getvar_singlepoint))
}
getvariance2(twovars)
dim(twovars)
sampleX[1,]
getvariance1 <- function(vars)
{
malpha <- mean(vars)
getvar_singlepoint <- function(x) mean((vars - malpha)*x)^2)
x <- seq(-1, 1, 0.001)
mean(sapply(x, getvar_singlepoint))
}
getvariance1 <- function(vars)
{
malpha <- mean(vars)
getvar_singlepoint <- function(x) mean(((vars - malpha)*x)^2)
x <- seq(-1, 1, 0.001)
mean(sapply(x, getvar_singlepoint))
}
getvariance1(alphas)
getvariance2 <- function(vars)
{
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g2(x, v) - g2(x, mvars))^2))
}
x <- seq(-1, 1, 0.1)
mean(sapply(x, getvar_singlepoint))
}
getvariance2(twovars)
getvariance2 <- function(vars)
{
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g2(x, v) - g2(x, mvars))^2))
}
x <- seq(-1, 1, 0.01)
mean(sapply(x, getvar_singlepoint))
}
getvariance2(twovars)
getvariance2 <- function(vars)
{
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g2(x, v) - g2(x, mvars))^2))
}
x <- seq(-1, 1, 0.05)
mean(sapply(x, getvar_singlepoint))
}
getvariance2 <- function(vars)
{
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g2(x, v) - g2(x, mvars))^2))
}
x <- seq(-1, 1, 0.05)
mean(sapply(x, getvar_singlepoint))
}
getvariance2(twovars)
alphas <- matrix(alphas, ncol=1)
colMeans(alphas)
getvariance2 <- function(g, vars)
{
if(is.list(vars))
vars <- matrix(vars, ncol=1)
mvars <- colMeans(vars)
getvar_singlepoint <- function(x) 
{
mean(apply(vars, 1, function(v) (g(x, v) - g(x, mvars))^2))
}
x <- seq(-1, 1, 0.01)
mean(sapply(x, getvar_singlepoint))
}
getvariance2(g2, twovars)
getvariance2(g1, alphas)
getvariance1(alphas)
geta <- function(x)
{
sumxxxx <- sum(x^4)
sumxxy <- sum(x^2*sin(pi*x))
sumxxy/sumxxxx
}
aa <- apply(sampleX, 1, geta)
maa <- mean(aa)
g3 <- function(x, vars) vars[1]*x^2
maa
getbias(g3, aa)
getvariance(g3, aa)
getvariance2(g3, aa)
is.list(aa)
class(aa)
dim(aa)
aa <- matrix(aa, ncol=1)
getvariance2(g3, aa)
getab <- function(x)
{
sumxxxx <- sum(x^4)
sumxx <- sum(x^2)
sumy <- sum(sin(pi*x))
N <- length(x)
sumxxy <- sum(x^2*sin(pi*x))
a <- (sumxxy - sumxx*sumy/N)/(sumxxxx - sumxx^2/N)
b <- (sumy-a*sumxx)/N
c(a,b)
}
aabb <- t(apply(sampleX, 1, getab))
g4 <- function(x, vars) vars[1]*x^2+vars[2]
getbias(g4)
getbias(g4, aabb)
getvariance2(g4, aabb)
q()
?scale
mx <- cbind(rnorm(10, 0, 1), rnorm(10, 2, 4))
mx
rowMeans(mx)
colMeans(mx)
colSD(mx)
apply(mx, 1, sd)
apply(mx, 2, sd)
smx <- scale(mx)
rowMeans(mx)
colMeans(mx)
colMeans(smx)
apply(smx, 1, sd)
apply(smx, 2, sd)
t(smx) %*% smx
?cov
cov(mx)
?cov
cor(mx)
cor(mx)*9
smx
smx$cener
smx["scaled:center"]
cor(mx[,1], mx[,1])
smx[,1]*smx[,1]
smx[,1]%*%smx[,1]
 (mx[,1] - mean(mx[,1]))/sd(mx[,1])
 sum((mx[,1] - mean(mx[,1]))^2)/(sd(mx[,1]))^2
?sd
?cor
load("https://spark-public.s3.amazonaws.com/dataanalysis/face.rda")
load("http://spark-public.s3.amazonaws.com/dataanalysis/face.rda")
face
download.file("http://spark-public.s3.amazonaws.com/dataanalysis/face.rda", dest="./face.rda")
load("face.rda")
face
ls()
dim(faceData)
image(faceData)
image(t(faceData))
image(t(faceData)[,32:1])
image(t(scale(faceData))[,32:1])
image(t(faceData)[,32:1])
par(mfrow=c(1,2))
image(t(faceData)[,32:1])
image(t(scale(faceData))[,32:1])
svd1 <- svd(faceData)
approx10 <- svd1$u[,1:10] %*% diag(svd1$d[1:10])%*% t(svd1$v[,1:10])
image(t(faceData)[,32:1])
image(t(approx10)[,32:1])
approx5 <- svd1$u[,1:5] %*% diag(svd1$d[1:5])%*% t(svd1$v[,1:5])
image(t(approx10)[,32:1])
image(t(approx5)[,32:1])
image(t(faceData)[,32:1])
par(mfrow=c(1,3))
image(t(faceData)[,32:1])
image(t(approx10)[,32:1])
image(t(approx5)[,32:1])
copy2png("no_scaled_faces.png")
copy2jpg("no_scaled_faces.png")
dev.copy2png("no_scaled_faces.png")
dev.copy2pdf("no_scaled_faces.pdf")
dev.copy2pdf(file="no_scaled_faces.pdf")
par(mfrow=c(1,2))
image(t(faceData)[,32:1])
image(t(scale(faceData))[,32:1])
dev.copy2pdf(file="scaled_faces.pdf")
png(file="scaled_face.png", height=4, weight=8)
png(file="scaled_face.png", height=4, width=8)
png(file="scaled_face.png", height=320, width=640)
image(t(faceData)[,32:1])
image(t(scale(faceData))[,32:1])
dev.off()
png(file="scaled_face.png", height=320, width=640)
par(mfrow=c(1,2))
image(t(scale(faceData))[,32:1])
image(t(faceData)[,32:1])
dev.off()
png(file="scaled_face.png", height=320, width=580)
par(mfrow=c(1,2))
image(t(faceData)[,32:1])
image(t(scale(faceData))[,32:1])
dev.off()
png(file="scaled_face.png", height=320, width=700)
par(mfrow=c(1,3))
image(t(faceData)[,32:1])
image(t(approx10)[,32:1])
image(t(approx5)[,32:1])
dev.off()
library(ElemStatLearn)
install.packages(ElemStatLearn)
install.packages("ElemStatLearn")
library("ElemStatLearn")
help(ElemStatLearn)
?ElemStatLearn
ls()
rm(list=ls())
ls()
search()
data(marketing)
ls()
str(marketing)
tapply(marketing$Income, marketing$Sex, c(max, min))
tapply(marketing$Income, marketing$Sex, max)
tapply(marketing$Income, marketing$Marital, max)
tapply(marketing$Income, marketing$Marital, min)
tapply(marketing$Income, marketing$Marital, list(max, min))
sp <- split(marketing$Income, marketing$Marital)
sp
apply(sp, c(max, min))
?apply
lapply(sp, c(max, min))
lapply(sp, summary)
lapply(sp, max, min)
sapply(sp, summary)
>marketing
?marketing
summary(marketing)
library(dataset)
library(datasets)
data(iris)
summary(iris)
irisSub <- iris[,1:4]
head(irisSub)
hh <- hclust(irisSub)
?hclust
?dist
dist(irisSub)
dist.iris <- dist(irisSub)
clust.iris <- hclust(dist.iris)
plot(clust.iris)
par(mfrow=c(1,1))
plot(clust.iris)
plot(clust.iris, cex=0.5)
str(clust.iris)
plot(clust.iris, hang=3, cex=0.5)
plot(clust.iris, hang=0.3, cex=0.5)
plot(clust.iris, hang=0.5, cex=0.5)
plot(clust.iris, cex=0.5, ylim=c(0,3))
plot(clust.iris, cex=0.5, ylim=c(0,2))
plot(clust.iris, cex=0.5, ylim=c(0,2))
plot(clust.iris, cex=0.5, ylim=c(0,2))
plot(clust.iris, cex=0.5, ylim=c(0,3))
plot(clust.iris, cex=0.5)
dev.off()
plot(clust.iris, cex=0.5)
dat <- read.csv("http://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.csv")
str(dat)
plot(dat$x, dat$y, pch=19)
kmeans.dat <- kmeams(dat[,1:2], centers=2)
kmeans.dat <- kmeans(dat[,1:2], centers=2)
str(kmeans.dat)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
kmeans.dat <- kmeans(dat[,1:2], centers=3)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
kmeans.dat <- kmeans(dat[,1:2], centers=2)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
data(zip.train)
str(zip.train)
heatmap(zip.train)
zip.train[1, 2:]
zip.train[1,2:257]
image(matrix(zip.train[1,2:257], nrow=16)
)
image(matrix(zip.train[2,2:257], nrow=16))
image(matrix(zip.train[299,2:257], nrow=16))
image(matrix(zip.train[399,2:257], nrow=16))
image(matrix(zip.train[1399,2:257], nrow=16))
?zip2image
image8 <-  zip2image(zip.train,8)
image18 <- zip2image(zip.train,18)
image(image8)
image(image18)
svd8 <- svd(image8)
svd8$v
svd8$d
plot(svd8$d)
plot(svd8$d^2/sum(svd8$d^2))
svd8$d^2/sum(svd8$d^2)
svd18 <- svd(image18)
svd18$d^2/sum(svd18$d^2)
plot(svd18$d)
plot(svd18$d^2/sum(svd18$d^2)
)
kmeans.dat <- kmeans(dat[,1:2], centers=2)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
kmeans.dat <- kmeans(dat[,2:3], centers=2)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
kmeans.dat <- kmeans(dat[,2], centers=2)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
kmeans.dat <- kmeans(dat[,3], centers=2)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
kmeans.dat <- kmeans(dat[,2:3], centers=2)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
kmeans.dat <- kmeans(dat[,], centers=2)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
kmeans.dat <- kmeans(dat[,c(1,3)], centers=2)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
kmeans.dat <- kmeans(dat[,1)], centers=2)
kmeans.dat <- kmeans(dat[,1], centers=2)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
dat[,1]
kmeans.dat <- kmeans(dat[,2:3], centers=2)
plot(dat$x, dat$y, col=kmeans.dat$cluster+1, pch=19)
q()
ls()
pica <- read.csv("pisa2009Train.csv")
pica <- na.omit(pica)
pica$raceeth <- relevel(pica$raceeth, ref="White")
lm1 <- lm(readingScore ~ ., data=pica)
summary(lm1)
path <- getwd()
path
q()
